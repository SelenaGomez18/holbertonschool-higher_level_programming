#!/usr/bin/python3
"""Unittests for text_indentation"""

import unittest
from io import StringIO
import sys

text_indentation = __import__('text_indentation').text_indentation

class TestTextIndentation(unittest.TestCase):
    def setUp(self):
        # Captura stdout
        self.captured_output = StringIO()
        self.old_stdout = sys.stdout
        sys.stdout = self.captured_output

    def tearDown(self):
        # Restaura stdout
        sys.stdout = self.old_stdout

    def test_simple_sentence(self):
        text_indentation("Hello. How are you?")
        expected = "Hello.\n\nHow are you?\n\n"
        self.assertEqual(self.captured_output.getvalue(), expected)

    def test_multiple_delimiters_together(self):
        text_indentation("Wait... What??! Stop: Now.")
        expected = "Wait...\n\nWhat??!\n\nStop:\n\nNow.\n\n"
        self.assertEqual(self.captured_output.getvalue(), expected)

    def test_spaces_after_delimiters(self):
        text_indentation("Hello.    How are you?   I am fine.")
        expected = "Hello.\n\nHow are you?\n\nI am fine.\n\n"
        self.assertEqual(self.captured_output.getvalue(), expected)

    def test_no_delimiters(self):
        text_indentation("Hello there")
        expected = "Hello there"
        self.assertEqual(self.captured_output.getvalue(), expected)

    def test_empty_string(self):
        text_indentation("")
        expected = ""
        self.assertEqual(self.captured_output.getvalue(), expected)

    def test_text_is_not_string(self):
        with self.assertRaises(TypeError):
            text_indentation(123)

    def test_only_delimiters(self):
        text_indentation("...???:::")
        expected = "...\n\n???\n\n:::\n\n"
        self.assertEqual(self.captured_output.getvalue(), expected)

    def test_spaces_before_text(self):
        text_indentation("   Hello. World!  ")
        expected = "Hello.\n\nWorld!"
        self.assertEqual(self.captured_output.getvalue(), expected)

if __name__ == '__main__':
    unittest.main()
